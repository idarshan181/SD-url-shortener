// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  lastLogin     DateTime  @default(now())

  onboardingCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  URL          URL[]
  CustomDomain CustomDomain[]
  Settings     Settings[]
  Feedback     Feedback[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model URL {
  id          String    @id @default(cuid())
  longURL     String
  shortURL    String    @unique
  clicks      Int       @default(0)
  userId      String? // Optional field to link to a user
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  expiresAt   DateTime? // Optional field for expiration date
  createdFrom String? // Optional field to track where the link was created from

  user      User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  Analytics Analytics[]
  Feedback  Feedback[]
}

model Analytics {
  id        String   @id @default(cuid())
  urlId     String
  clickedAt DateTime @default(now())
  userAgent String? // Optional field to store the user agent of the click
  ipAddress String? // Optional field to store the IP address of the user

  url URL @relation(fields: [urlId], references: [id], onDelete: Cascade)
}

model CustomDomain {
  id        String   @id @default(cuid())
  userId    String
  domain    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Settings {
  id                   String   @id @default(cuid())
  userId               String
  notificationsEnabled Boolean  @default(true)
  theme                String? // Optional field for user theme preference
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Feedback {
  id        String   @id @default(cuid())
  userId    String?
  urlId     String?
  message   String
  createdAt DateTime @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  url  URL?  @relation(fields: [urlId], references: [id], onDelete: Cascade)
}
